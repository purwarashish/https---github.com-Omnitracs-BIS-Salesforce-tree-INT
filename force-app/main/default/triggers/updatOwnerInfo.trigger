/*
History: Created by David Cohen 
         Updated by Anand Sanjeev, TCS on 12/12/12 - Created new field called Lead Reassignment Role in User object
         Title field is replaced by this new field to control lead Reassignment.
*/
trigger updatOwnerInfo on Lead (before insert ,before update) 
{/*
       BypassTriggerUtility bt = new BypassTriggerUtility();  
       if (bt.isTriggerBypassed()) {
           return;
       }

       try{
        PRMAcctQueueCombination__c[] partnerQueues = [select ID ,AccountID__c ,QueueIds__c from PRMAcctQueueCombination__c]; // get list of partner queues.
        
        User[] userList = [SELECT u.id ,u.Title , u.Lead_Reassignment_Role__c, u.userType ,u.accountID FROM User u WHERE (u.Lead_Reassignment_Role__c in('Inside Sales Rep' ,'Field Sales Rep')
                                             OR u.userType Like'%Partner%') AND IsActive = true];
        
        // get and classify the running user
        string userType;
        
        if(userInfo.getUserType().containsIgnoreCase('Partner') )
        {
            userType = 'Partner';
        }
        else
        {
            User cu = [select u.profileID ,u.title, u.Lead_Reassignment_Role__c from User u where u.ID =: userInfo.getUserID()];
            if (cu.Lead_Reassignment_Role__c == 'Inside Sales Rep')
            {
                userType = 'ISR';
            }
            else if (cu.Lead_Reassignment_Role__c == 'Field Sales Rep')
            {
                userType = 'FSR';
            }
            else
            {
                userType = 'Mktg';
            }
            
            // get the userid, and query the user object to get the title and profile id.
        //  User currentUser = [select u.title ,(select p.Name from Profile) from  User u where u.id =: userInfo.getUserID];
        }
        //Updated by Anand, 4/11/2013 to avoid a query inside the for loop. 
        Set<Id> groupdIds = new Set<Id>();
           
        for (lead newLead:trigger.new)
        {
            String OwnerId = newLead.ownerId;
            if(OwnerID.startsWith('00G'))
            groupdIds.add(OwnerId);
        }
        Map<Id,Group> mapOfGroups = new Map<Id,Group>();
        if(!groupdIds.isEmpty())
        mapOfGroups = new Map<Id,Group>([select grp.Name from Group grp where grp.ID IN: groupdIds LIMIT 1000]);
            
        // create a list of the 
        for (lead newLead:trigger.new)
    {
        Boolean ownerChange = false;
        if(trigger.isUpdate) // get the prior information
        {
        lead oldLead = trigger.OldMap.get(newLead.id);
        if (oldLead.ownerID != newLead.OwnerID)
        {
            ownerChange = true;
                // get the prior owner information.      
                newLead.if_prior_owner_type__c = oldlead.IF_current_Owner_Type__c;
                newlead.IF_prior_queue_name__c = oldLead.IF_current_queue_name__c;
                newLead.IF_Prior_Queue_ISPartner__c = oldLead.IF_current_Queue_ISPartner__c;
                    // clear out the current owner information
                newlead.IF_current_owner_type__c = null;
                newLead.IF_Current_Queue_Name__c = null;
                newLead.IF_Current_Queue_ISPartner__c = false;
  
        }
          // check to determine if need to reset the marketing cycle.
          // will restart the marketing cycle under the following condition.
          // 1. record goes from nurture / rejected to MI, or MQL
          // 2. record goes from MQL to MI
          
          //Fix for case 00099703
          if(newLead.IF_Marketing_Cycle__c == null)
          newLead.IF_Marketing_Cycle__c = 0; 
          
          if(oldLead.Status == 'MQL' && newLead.Status == 'MI')
          {
            newLead.IF_Marketing_Cycle__c = newLead.IF_Marketing_Cycle__c + 1;
          }
          if (oldLead.status.endsWith('Rejected') && (newLead.Status == 'MI' || newLead.status == 'MQL'))
          {
            newLead.IF_Marketing_Cycle__c = newLead.IF_Marketing_Cycle__c + 1;
          }
                // check for PAL rejectd lead generated by a partner. IF it is then send to the partner queue.
                //no need to assign the lead to partner queue any more so commenting the logic below.
                /*if (oldlead.IF_Rejection_reason__c == null && newLead.IF_Rejection_Reason__c != null && newlead.IF_Lead_Source_Type__c == 'Partner' && oldlead.Status == 'PAL')
                {
                    // lead is PAL rejected. send ownership back to partner queue.
                    if(newLead.IF_Partner_Queue_ID__c != null)
                    {
                        newLead.OwnerID = newLead.IF_Partner_Queue_ID__c;
                    }
                }*/     /*
                if(oldLead.Status != newLead.status)
                {
                    newLead.IF_Last_Status_Update__c = system.now();
                }
            
        } // end of Trigger is update
        if (trigger.isInsert)
        {
            newLead.IF_Last_Status_Update__c = System.now();
        }
        
            if (trigger.isInsert && newLead.IF_Lead_Source_Type__c == null) // fill in lead source type if not already done.
            {
                if(newlead.IF_Original_Partner_Lead_source__c != null)
                {
                    newLead.IF_Lead_Source_Type__c = 'Partner';
                }
                else
                {
                    newLead.IF_Lead_Source_Type__c = userType;
                }
            }
        
          // next we need to go through and get the information for the update.
          // if the new owner id starts with 00g then the owner is a queue
            // else the owner is and individual.
            
            if (trigger.isInsert || ownerChange == true)
            {
                string ownerID = newlead.OwnerID;
            if (OwnerID == null)
            {
               OwnerID = '';
            }       
            if (OwnerID.startsWith('00G')) 
            {
                newLead.IF_Current_Owner_Type__c = 'Queue';
                
                // determine if the owner is a partner
                for (PRMAcctQueueCombination__c pq: partnerQueues)
                {
                    
                    string pqQueue = pq.QueueIds__c;
                    
                    if  (pqQueue.contains(OwnerID.Left(15))== true)
                    {
                        newLead.IF_current_Queue_ISPartner__c = true;
                        break;
                    }
                }
            
                    newLead.IF_current_Owner_type__C = 'Queue';
                    
                    //Removed the query inside the for loop - Anand 4/11/13
                    // query the group to get the queue name
                    /*Group grp;
                    grp = [select grp.Name from Group grp where grp.ID =: OwnerId ];
                    newLead.IF_current_Queue_name__c = grp.Name;     *//*
                    
                    if(mapOfGroups.containsKey(newLead.OwnerId))
                    newLead.IF_current_Queue_name__c = mapOfGroups.get(newLead.OwnerId).Name; 
                    
            }
            else if (OwnerID.startsWith('005'))// record is owned by a user
            {
                    //User u;
                    //u = [select u.title ,u.Name ,u.userType ,u.accountID from User u where u.ID =:OwnerId];
                    
                    for(User u: UserList)
                    {
                        if (u.ID == newLead.ownerId)
                        {
                        if (u.userType.containsIgnoreCase('Partner'))
                        {
                                newlead.IF_Current_Owner_type__c = 'Partner';
                                // need code to get the partner queueID
                                for(PRMAcctQueueCombination__c pq: partnerQueues)
                                {
                                    string aid = u.accountID;
                                    
                                    if(aid.left(15) == pq.AccountID__c)
                                    {
                                        newLead.IF_Partner_queue_id__c = pq.queueIDs__c.left(15);
                                        break; 
                                    }
                                }
                        }
                        
                        else if (u.Lead_Reassignment_Role__c == null)
                        {
                            NewLead.IF_Current_Owner_Type__c = 'Other';
                        }
        
                        else if (u.Lead_Reassignment_Role__c == ('Inside Sales Rep'))
                        {
                                newlead.IF_Current_Owner_Type__c = 'ISR';
                        }
                        else if (u.Lead_Reassignment_Role__c ==('Field Sales Rep'))
                        {
                                newLead.IF_current_Owner_Type__c = 'FSR';
                        }
                        else
                        {
                                newLead.IF_current_owner_Type__c = 'Other';
                        }
                        break;
                        }
                    }
            }
            else // not owned by either a user or a queue.
            {
                newLead.IF_Current_Owner_Type__c = 'Other';
            }
      }
      
    }
       }
       catch(exception e)
       {
        System.debug('************ exception :' + e.getMessage());
       }*/
}