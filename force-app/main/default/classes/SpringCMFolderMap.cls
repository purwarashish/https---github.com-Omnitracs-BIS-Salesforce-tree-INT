//
// Generated by Dennis Le
// Date 8/11/2018

public class SpringCMFolderMap {

	public class Documents {
		public List<Items> Items {get;set;} 
		public String Href {get;set;} 
		public Integer Offset {get;set;} 
		public Integer Limit_Z {get;set;} // in json: Limit
		public String First {get;set;} 
		public String Last {get;set;} 
		public Integer Total {get;set;} 

		public Documents(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Items') {
							Items = arrayOfItems(parser);
						} else if (text == 'Href') {
							Href = parser.getText();
						} else if (text == 'Offset') {
							Offset = parser.getIntegerValue();
						} else if (text == 'Limit') {
							Limit_Z = parser.getIntegerValue();
						} else if (text == 'First') {
							First = parser.getText();
						} else if (text == 'Last') {
							Last = parser.getText();
						} else if (text == 'Total') {
							Total = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Documents consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Items {
		public String Name {get;set;} 
		public String CreatedDate {get;set;} 
		public String CreatedBy {get;set;} 
		public String UpdatedDate {get;set;} 
		public String UpdatedBy {get;set;} 
		public String Description {get;set;} 
		public ParentFolder ParentFolder {get;set;} 
		public ParentFolder HistoryItems {get;set;} 
		public AccessLevel AccessLevel {get;set;} 
		public Integer PageCount {get;set;} 
		public ParentFolder Lock {get;set;} 
		public String PreviewUrl {get;set;} 
		public ParentFolder Versions {get;set;} 
		public ParentFolder ShareLinks {get;set;} 
		public ParentFolder DocumentProcessTrackingActivities {get;set;} 
		public ParentFolder DocumentReminders {get;set;} 
		public ParentFolder RelatedDocuments {get;set;} 
		public String DownloadDocumentHref {get;set;} 
		public Integer NativeFileSize {get;set;} 
		public Integer PdfFileSize {get;set;} 
		public String Href {get;set;} 

		public Items(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Name') {
							Name = parser.getText();
						} else if (text == 'CreatedDate') {
							CreatedDate = parser.getText();
						} else if (text == 'CreatedBy') {
							CreatedBy = parser.getText();
						} else if (text == 'UpdatedDate') {
							UpdatedDate = parser.getText();
						} else if (text == 'UpdatedBy') {
							UpdatedBy = parser.getText();
						} else if (text == 'Description') {
							Description = parser.getText();
						} else if (text == 'ParentFolder') {
							ParentFolder = new ParentFolder(parser);
						} else if (text == 'HistoryItems') {
							HistoryItems = new ParentFolder(parser);
						} else if (text == 'AccessLevel') {
							AccessLevel = new AccessLevel(parser);
						} else if (text == 'PageCount') {
							PageCount = parser.getIntegerValue();
						} else if (text == 'Lock') {
							Lock = new ParentFolder(parser);
						} else if (text == 'PreviewUrl') {
							PreviewUrl = parser.getText();
						} else if (text == 'Versions') {
							Versions = new ParentFolder(parser);
						} else if (text == 'ShareLinks') {
							ShareLinks = new ParentFolder(parser);
						} else if (text == 'DocumentProcessTrackingActivities') {
							DocumentProcessTrackingActivities = new ParentFolder(parser);
						} else if (text == 'DocumentReminders') {
							DocumentReminders = new ParentFolder(parser);
						} else if (text == 'RelatedDocuments') {
							RelatedDocuments = new ParentFolder(parser);
						} else if (text == 'DownloadDocumentHref') {
							DownloadDocumentHref = parser.getText();
						} else if (text == 'NativeFileSize') {
							NativeFileSize = parser.getIntegerValue();
						} else if (text == 'PdfFileSize') {
							PdfFileSize = parser.getIntegerValue();
						} else if (text == 'Href') {
							Href = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Items consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String Name {get;set;} 
	public String CreatedDate {get;set;} 
	public String CreatedBy {get;set;} 
	public String UpdatedDate {get;set;} 
	public String UpdatedBy {get;set;} 
	public String Description {get;set;} 
	public ParentFolder ParentFolder {get;set;} 
	public String BrowseDocumentsUrl {get;set;} 
	public AccessLevel AccessLevel {get;set;} 
	public Documents Documents {get;set;} 
	public ParentFolder Folders {get;set;} 
	public ParentFolder ShareLinks {get;set;} 
	public String CreateDocumentHref {get;set;} 
	public String Href {get;set;} 

	public SpringCMFolderMap(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'Name') {
						Name = parser.getText();
					} else if (text == 'CreatedDate') {
						CreatedDate = parser.getText();
					} else if (text == 'CreatedBy') {
						CreatedBy = parser.getText();
					} else if (text == 'UpdatedDate') {
						UpdatedDate = parser.getText();
					} else if (text == 'UpdatedBy') {
						UpdatedBy = parser.getText();
					} else if (text == 'Description') {
						Description = parser.getText();
					} else if (text == 'ParentFolder') {
						ParentFolder = new ParentFolder(parser);
					} else if (text == 'BrowseDocumentsUrl') {
						BrowseDocumentsUrl = parser.getText();
					} else if (text == 'AccessLevel') {
						AccessLevel = new AccessLevel(parser);
					} else if (text == 'Documents') {
						Documents = new Documents(parser);
					} else if (text == 'Folders') {
						Folders = new ParentFolder(parser);
					} else if (text == 'ShareLinks') {
						ShareLinks = new ParentFolder(parser);
					} else if (text == 'CreateDocumentHref') {
						CreateDocumentHref = parser.getText();
					} else if (text == 'Href') {
						Href = parser.getText();
					} else {
						System.debug(LoggingLevel.WARN, 'SpringCMFolderMap consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class ParentFolder {
		public String Href {get;set;} 

		public ParentFolder(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Href') {
							Href = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ParentFolder consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class AccessLevel {
		public Boolean See {get;set;} 
		public Boolean Read {get;set;} 
		public Boolean Write {get;set;} 
		public Boolean Move {get;set;} 
		public Boolean Create {get;set;} 
		public Boolean SetAccess {get;set;} 

		public AccessLevel(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'See') {
							See = parser.getBooleanValue();
						} else if (text == 'Read') {
							Read = parser.getBooleanValue();
						} else if (text == 'Write') {
							Write = parser.getBooleanValue();
						} else if (text == 'Move') {
							Move = parser.getBooleanValue();
						} else if (text == 'Create') {
							Create = parser.getBooleanValue();
						} else if (text == 'SetAccess') {
							SetAccess = parser.getBooleanValue();
						} else {
							System.debug(LoggingLevel.WARN, 'AccessLevel consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
		
	public static SpringCMFolderMap parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new SpringCMFolderMap(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	
    private static List<Items> arrayOfItems(System.JSONParser p) {
        List<Items> res = new List<Items>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Items(p));
        }
        return res;
    }

}