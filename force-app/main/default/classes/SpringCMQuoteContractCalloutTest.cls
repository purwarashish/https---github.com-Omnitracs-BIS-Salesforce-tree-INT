/********************************************************************************************
 Generated by: Dennis Le
 Date: 7/31/2018
 Objective:
   Test Rest API callout and button contract update callout
********************************************************************************************/
@isTest(SeeAllData=true)
public with sharing class SpringCMQuoteContractCalloutTest {	
	public static VistaAssetHelperUtil util = new VistaAssetHelperUtil();
	private static void setWebservice() {
		
		final String jsonBody = '[{"client_id": "f7e6a07a-aa6d-45b8-93c1-4812ea314057", "client_secret": "1dbb257cee5844eaa4d99d5b51840f22dZcb3xNU63rt9esErhtKR5ZaYHOOxOIysi3SjYd1H7nbILPau6rZ3rZi9BCwi9hrv2BbkZfSD2DUS8SN2yd0gs5AIVSiVrTI"}]'; 
		final String endpoint = 'https://authuat.springcm.com/api/v201606/apiuser';
		HttpRequest request = new HttpRequest();
		request.setEndpoint(endpoint);
        request.setBody(jsonBody);
		request.setHeader('Content-Type','application/json');
		request.setHeader('Accept','application/json');
		request.setMethod('POST');
		
		Map<String, String> responseHeaders = new Map<String, String>();
		responseHeaders.put('Content-Type', 'application/json');
		   
        SpringCMQuoteContractMockGenerator fakeResponse = new SpringCMQuoteContractMockGenerator(200, 'OK',
                                                 					'[{"user": "Username", "passwd": "user_password"}]', responseHeaders);
		Test.setMock(HttpCalloutMock.class, fakeResponse);
		HTTPResponse res = fakeResponse.respond(request);
		System.assertNotEquals(null, res); 
        
    }
    
    public static testmethod void testQuoteContractUpdate() {
        
        //call setMock HttpCallout requires for apex callout testing.
        setWebservice();
        
        Account account = new Account(Name = 'Spring CM Quote Test Account', QWBS_Market__c = 'Channel', Primary_Business_Unit__c = 'Omnitracs Domestic', QWBS_Cust_ID__c = '12345', Segment__c = 'TL', Phone = '(666) 666-6666', BillingStreet = 'Byrnes St', BillingCity = 'Dallas', BillingState = 'TX', BillingPostalCode = '75201', BillingCountry = 'USA');
        insert account;
	 	
        Id recTypeId = [select Id from RecordType where SobjectType = 'Opportunity' and Name = 'CNR Sales'].Id;
        Opportunity opportunity = new Opportunity();
        opportunity.Name = 'Test Callout Opportunity';
        opportunity.CloseDate = System.today();
        opportunity.AccountId = account.Id;
        opportunity.RecordTypeId = recTypeId;
        opportunity.Order_Type__c = 'New';
        opportunity.LeadSource = 'SEO';
        opportunity.Description = 'Opp Desc';
        opportunity.StageName = 'Sales Acceptance';
        insert opportunity;
        
        System.debug(LoggingLevel.WARN, 'QuoteContractButton.createSBQuote');
        SBQQ__Quote__c quote = util.createSBQuote(opportunity, account, Date.today(), true);
        
        Test.startTest();
        
		PageReference pageRef = Page.SpringCMQuoteContractUpdate;
		pageRef.getParameters().put('Id', quote.Id);
		Test.setCurrentPage(pageRef);
		ApexPages.StandardController set_ctl = new ApexPages.StandardController(quote);
		
		SpringCMQuoteContractCallOut con = new SpringCMQuoteContractCallOut(set_ctl);
		PageReference contractUpdate = con.quoteContractUpdate();
		System.assertNotEquals(null, contractUpdate);
		
		Test.stopTest();
        
    }
    
    @isTest 
    public static void TestBatchableCallout() {

		//call setMock HttpCallout requires for apex callout testing.
        setWebservice();
				
		Test.startTest(); 
		
		SpringCMQuoteContractCallOut cm = new SpringCMQuoteContractCallOut();
		//cm.query = 'Select s.SBQQ__Status__c, s.SBQQ__Opportunity2__r.Name, s.SBQQ__Opportunity2__c, s.SBQQ__Account__r.Name, ' +
        //           's.SBQQ__Account__c, s.Name, s.Id, s.Last_Action__c, s.Date_Time_of_Last_Action__c ' +
		//			 'From SBQQ__Quote__c s WHERE s.SBQQ__Primary__c = TRUE AND s.SBQQ__Status__c in ' +
		//			 '(\'Signed\', \'Sent for Signature\', \'Sent for Countersignature\') and s.Name = \'Q-87131\'';
    	    	
        Database.executeBatch(cm, 1);
        
        Test.stopTest(); 
    } 
    
    @isTest
    public static void TestgetDocumentApiMethod() {

		final String uri_doc = 'https://apiuatna11.springcm.com/v201411/documents/eedd4d43-4c9c-e811-9c16-3ca82a1e3f41/historyitems';

		setWebservice();
		
		Test.startTest(); 
		SpringCMQuoteContractCallOut cm = new SpringCMQuoteContractCallOut();
		HTTPResponse doc_response = cm.getDocumentApiMethod(uri_doc);
		System.assertNotEquals(null, doc_response); 
		Test.stopTest();
    } 
}