/***************************************************************************************************
 Generated by: Dennis Le
 Date: 7/17/2018
 Updated: 8/11/2018 updated sent to SpringCM as folder path and find the last updated pdf documents
 Objective:
   This Rest API callout to pull data from SpringCM that we will need to populate new fields
   Create a daily job to update all of the new fields with the document history data.
    Custom detail page layout on Quote object integrate with SpringCM update contract 
****************************************************************************************************/
global class SpringCMQuoteContractCallOut implements Database.Batchable<sObject>, Database.AllowsCallouts, Schedulable {
    
    private ApexPages.StandardController standardController;
    public SBQQ__Quote__c quoteObject {get;set;}
    public String query;
    public HttpResponse response;
    private SpringCMEos.RetrieveEnvironment environment = new SpringCMEos.RetrieveEnvironment();
    //Default to Production API User Authentication Endpoint
    public String endpoint = 'https://auth.springcm.com/api/v201606/apiuser';
    private String root = '/Omnitracs, LLC';
    private String queryname = 'PROD';
    private String access_token;
    private String api_base_url;
    
    public SpringCMQuoteContractCallOut(ApexPages.StandardController standardController)
    {
        this.standardController = standardController;
        quoteObject = (SBQQ__Quote__c) standardController.getRecord();
        
        String environmentName = environment.getEnvironmentPrefix();        
        String prefix;
        if (String.isNotBlank(environmentName)) 
            prefix = environmentName.substringBefore('.').toLowerCase();
  
        endpoint = (prefix=='uatna11' || prefix=='uat') ? 'https://authuat.springcm.com/api/v201606/apiuser' : 'https://auth.springcm.com/api/v201606/apiuser';    
        root = (prefix=='uatna11' || prefix=='uat') ? '/Omnitracs - UAT' : '/Omnitracs, LLC';
        queryname = (prefix=='uatna11' || prefix=='uat') ? 'UAT' : 'PROD'; 
    }
    
    public PageReference quoteContractUpdate()
    {
        List<SBQQ__Quote__c> sbqObj = querySalesforceQuote();
        if (sbqObj != null)
        getSpringCM_QuoteApi(sbqObj);
        
        PageReference m_stc = new PageReference('/' + ApexPages.currentPage().getParameters().get('Id'));
        m_stc.setRedirect(true);
        
        return m_stc;
    }
        
    public SpringCMQuoteContractCallOut() {
        String environmentName = environment.getEnvironmentPrefix();
              
        String prefix;
        if (String.isNotBlank(environmentName)) 
            prefix = environmentName.substringBefore('.').toLowerCase();
  
        endpoint = (prefix=='uatna11' || prefix=='uat') ? 'https://authuat.springcm.com/api/v201606/apiuser' : 'https://auth.springcm.com/api/v201606/apiuser';    
        root = (prefix=='uatna11' || prefix=='uat') ? '/Omnitracs - UAT' : '/Omnitracs, LLC';
        queryname = (prefix=='uatna11' || prefix=='uat') ? 'UAT' : 'PROD'; 
        
    }   
    
    @TestVisible private HttpResponse createAuthRequest() {
                
        //SpringCMApiEnvironment__mdt mdt = SpringCMApiEnvironment.getApiEnvironment();
        SpringCMApiEnvironment__mdt mdt = [SELECT Client_Id__c, Client_Secret__c, AuthEndpoint__c
                                            FROM SpringCMApiEnvironment__mdt WHERE DeveloperName =: queryname];
        jsonWrapper wrap = new jsonWrapper();
        wrap.client_id = mdt.Client_Id__c;
        wrap.client_secret = mdt.Client_Secret__c;
        String jsonBody = JSON.serialize(wrap);                
        
        HttpRequest request = new HttpRequest();
        request.setEndpoint(endpoint);
        request.setBody(jsonBody);
        request.setHeader('Content-Type','application/json');
        request.setHeader('Accept','application/json');
        request.setMethod('POST');
        
        Http http = new Http();        
        try {
            response = http.send(request);
            System.debug(response.toString());
            System.debug('STATUS: ' + response.getStatus());
            System.debug('STATUS_CODE: '+ response.getStatusCode());                    
        }
        catch(System.CalloutException e) {
            System.debug('ERROR:' + e.getMessage());
        }               
        
        //Map<String, Object> jmap = (Map<String, Object>) JSON.deserializeUntyped(response.getBody());
        JSONParser parser = JSON.createParser(response.getBody());
        while (parser.nextToken() != null) {
            if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                    if (text == 'access_token') {
                        access_token = parser.getText();
                    }
                    if (text == 'api_base_url') {
                        api_base_url = parser.getText();
                    } 
                }
            }
        }
        
        return response;
    }
    
    public class jsonWrapper {
      
        public String client_id {get; set;}
        public String client_secret {get; set;}
      
      public jsonWrapper() {
        client_id = null;
        client_secret = null;
      }
      
    }       
    
    @TestVisible
    public HTTPResponse getDocumentApiMethod(String endpoint) {     
        
        HttpRequest httprequest = new HttpRequest();
        HttpResponse resp = new HttpResponse();
        httprequest.setEndpoint(endpoint);
        httprequest.setHeader('Authorization', 'bearer '+access_token );
        httprequest.setHeader('Content-Type' , 'application/json');
        httprequest.setMethod('GET');           
        
        Http http = new Http();        
        try {
            resp = http.send(httprequest);
        }
        catch(System.CalloutException e) {
            System.debug('getDocumentApiMethod ERROR:' + e.getMessage());
        }  
        
        return resp;
    }               
    
    public void getSpringCM_QuoteApi(List<sObject> scope) {    
        
        Continuation con = new Continuation(60);
                    
        response = createAuthRequest();
        api_base_url = api_base_url + '/v201411/folders?path=';     
        //api_base_url = api_base_url + '/v201411/documents?path=';     
        integer i=1;
        String hasNextCreatedDate = null;
        String hasNextUpdatedDate = null;
                
        //use Map to prevent the duplicate Id in the same quote get multiple Doc updated
        Map<Id, String> apiCMdocument = new Map<Id, String>();
        Map<Id, SBQQ__Quote__c> mapSBQQ_Quote_c = new Map<Id, SBQQ__Quote__c>();
        
        for (sObject sobj : scope) {
                                
            SBQQ__Quote__c SBQQ = (SBQQ__Quote__c) sobj;                
            String accountName = SBQQ.SBQQ__Account__r.Name;
            String opportunityName = SBQQ.SBQQ__Opportunity2__r.Name;
            String quoteName = SBQQ.Name;
            
            accountName = accountName.replaceAll('[/:*?\\\\"<>|&]', '_'); // replace following special characters with underscore /:*?\"<>|&
            opportunityName = opportunityName.replaceAll('[/:*?\\\\"<>|&]', '_'); // replace following special characters with underscore /:*?\"<>|&
            String springCMFolderPath = root + '/Other Sources/Salesforce/Accounts/' + accountName + '/Opportunities/'  + opportunityName + '/Quotes/' + quoteName + '/';           
            String pathURI = EncodingUtil.urlEncode(springCMFolderPath, 'UTF-8');
            System.debug('@' + springCMFolderPath);
            
            String expand ='&expand=Documents';         
            String uriEndpoint = api_base_url + pathURI + expand;
        
            HttpRequest req =new HttpRequest();
            HttpResponse response_quote;                                                     
            req.setEndpoint(uriEndpoint);
            req.setHeader('Authorization', 'bearer '+access_token );
            req.setHeader('Content-Type' , 'application/json');
            req.setMethod('GET');           
        
            Http http = new Http();        
            try {
                response_quote = http.send(req);
                System.debug(response_quote.toString());
            }
            catch(System.CalloutException e) {
                System.debug('ERROR:' + e.getMessage());
            }      
            
            if (response_quote.getStatusCode() == 200 && response_quote.getStatus() == 'OK' && response_quote.getBody() != null) {
                
                SpringCMFolderMap springFoldermap = SpringCMFolderMap.parse(response_quote.getBody());
                if ( springFoldermap.Documents != null ) {
                    for (SpringCMFolderMap.Items Itemz : springFoldermap.Documents.Items) {
                        if (Itemz != null) { 
                            String documentUpdatedDate = Itemz.UpdatedDate;
                            documentUpdatedDate = documentUpdatedDate.replace('T', ' ').replace('Z', ''); 
                            
                            if ( documentUpdatedDate > hasNextUpdatedDate ) {                                                                                  
                                apiCMdocument.put(SBQQ.Id, Itemz.HistoryItems.Href);    
                            }   
                            
                            hasNextUpdatedDate = documentUpdatedDate;
                        }                       
                    }
                        
                    if (!apiCMdocument.values().isEmpty()) {
                        String document_uri;
                        HttpResponse documentItems;
                        for (Id id : apiCMdocument.keySet()) {
                            document_uri = apiCMdocument.get(id);                           
                        }
                        
                        documentItems = getDocumentApiMethod(document_uri);
                        
                        SpringCMActionItemsMap actionItems = SpringCMActionItemsMap.parse(documentItems.getBody());             
                        if ( actionItems.Items != null ) {
                            for (SpringCMActionItemsMap.Items Itemz : actionItems.Items) {
                                if (Itemz != null && Actions.contains(Itemz.Action)) { 
                                    String action_comment = Itemz.Action + ' ' + Itemz.Comment;                 
                                    String created_date = Itemz.CreatedDate;
                                    created_date = created_date.replace('T', ' ').replace('Z', ''); 
                                    DateTime dtOfAction = DateTime.valueOfGMT(created_date);                            
                            
                                    if ( created_date > hasNextCreatedDate ) {                                                                                 
                                        SBQQ__Quote__c cm_doc = new SBQQ__Quote__c (Id = SBQQ.Id, Last_Action__c = action_comment, Date_Time_of_Last_Action__c = dtOfAction );
                                        mapSBQQ_Quote_c.put(cm_doc.Id, cm_doc); 
                                    }   
                            
                                    hasNextCreatedDate = created_date;
                                }                                                       
                            }
                        } 
                    } 
                }
                        
            } else {
                System.debug('SpringCM folder not found with code: ' + response_quote.getStatusCode() + ', count: ' + i++);
            }                   
        
        }
        
        try {   
            if(!mapSBQQ_Quote_c.values().isEmpty()){
                System.debug(mapSBQQ_Quote_c.keySet()); System.debug(mapSBQQ_Quote_c.values()); 
                update mapSBQQ_Quote_c.values();
            }
        } catch(DmlException e) {
            System.debug('An unexpected error has occurred springCM_quote: ' + e.getMessage());
        }   
        
    }            
        
    public List<SBQQ__Quote__c> querySalesforceQuote()
    {           
        List<SBQQ__Quote__c> quoteResults;
                
        try 
        { 
            quoteResults = [Select s.SBQQ__Status__c, s.SBQQ__Opportunity2__r.Name, s.SBQQ__Opportunity2__c, s.SBQQ__Account__r.Name, s.SBQQ__Account__c, s.Name, s.Id, s.Last_Action__c, s.Date_Time_of_Last_Action__c 
                            From SBQQ__Quote__c s Where s.Id =: quoteObject.Id];
                             
            return quoteResults;               
        } catch (exception e)
        {
            System.debug('@@Error@@ ' + e.getMessage());
        }     
        
        return quoteResults;   
    }
        
    global Database.QueryLocator start(Database.BatchableContext BC) {

        query = 'Select SBQQ__Status__c, SBQQ__Opportunity2__r.Name, SBQQ__Opportunity2__c, SBQQ__Account__r.Name, SBQQ__Account__c, Name, Id, Last_Action__c, Date_Time_of_Last_Action__c From SBQQ__Quote__c WHERE SBQQ__Primary__c = TRUE AND SBQQ__Status__c in (\'Signed\', \'Sent for Signature\', \'Sent for Countersignature\') AND (SBQQ__Opportunity2__r.StageName NOT IN (\'Closed Won\', \'Closed Lost\') OR (SBQQ__Opportunity2__r.StageName IN (\'Closed Won\', \'Closed Lost\') AND LastModifiedDate >= LAST_N_DAYS:180 AND (NOT Last_Action__c  like \'%Signed%\'))) order by LastModifiedDate DESC';
    
        if(System.Test.isRunningTest()){ query = query+ ' LIMIT 1';}                
        
        DataBase.QueryLocator ql = DataBase.getQueryLocator(query);
        return ql;
    }
        
    global void execute(Database.BatchableContext BC, List<sObject> scope) {
        getSpringCM_QuoteApi(scope);
    }
    
    global void execute(SchedulableContext sc) {
        Database.executeBatch(this, 40);
    }
     
    global void finish(Database.BatchableContext BC) {}     
        
    public static Set<String> Actions = 
        new Set<String>{'Document Sent',
                        'Document Viewed',
                        'Document Signed',
                        'Document Rejected',
                        'Document Delegated'};      
                             
}